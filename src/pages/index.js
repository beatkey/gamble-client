import Head from "next/head";
import {useEffect, useState} from "react";
import socket from "@/utils/socket";
import {signOut, useSession} from "next-auth/react";
import {toast} from "react-toastify";
import {useDispatch, useSelector} from "react-redux";
import {setBalance} from "@/stores/user";
import Header from "@/components/Global/Header";
import SpinHistory from "@/components/Home/SpinHistory";
import Players from "@/components/Home/Players";
import AmountControl from "@/components/Home/AmountControl";
import Roulette from "@/components/Home/Roulette";

export default function Home() {
    const dispatch = useDispatch()
    const session = useSession()

    const balance = useSelector(state => state.user.balance)
    const [time, setTime] = useState(null)
    const [spin, setSpin] = useState({
        spinning: false,
        randomNumber: null,
        range: null,
        raffleTime: null
    })

    const [amount, setAmount] = useState(0)

    const [players, setPlayers] = useState({
        red: [],
        green: [],
        black: []
    })

    const [spinHistory, setSpinHistory] = useState([])
    const [playedColor, setPlayedColor] = useState([])
    const [winAmount, setWinAmount] = useState(null)

    const giveEarning = (randomNumber) => {
        if (randomNumber > 0 && randomNumber <= 7) { // red
            const data = playedColor.find(value => value.color === "red")
            if (data) {
                dispatch(setBalance(balance + data.amount * 2))
                setWinAmount(data.amount * 2)
            }
        } else if (randomNumber > 7 && randomNumber <= 14) { // black
            const data = playedColor.find(value => value.color === "black")
            if (data) {
                dispatch(setBalance(balance + data.amount * 2))
                setWinAmount(data.amount * 2)
            }
        } else { // green
            const data = playedColor.find(value => value.color === "green")
            if (data) {
                dispatch(setBalance(balance + data.amount * 14))
                setWinAmount(data.amount * 14)
            }
        }

        setPlayedColor([])
        setTimeout(() => {
            setWinAmount(null)
        }, 2000)
    }

    function playHandle(color) {
        if (session && session.status === "unauthenticated") {
            toast("You need to login to play.", {
                type: "error",
                position: "top-right",
            });
            return;
        }

        if (time <= 1) {
            return
        }

        if (!socket.connected) {
            toast("Server error", {
                type: "error",
                position: "top-right",
            });
            return;
        }

        if (amount.toString().length > 1 && amount > 0 && checkBalance(amount)) {
            socket.emit("playHandle", {
                color: color,
                amount: amount,
                token: session.data.user.accessToken
            }, (res) => {
                if (res.status) {
                    dispatch(setBalance(balance - amount))

                    setPlayedColor(prevState => [...prevState, {color, amount}])

                    toast(`${color.charAt(0).toUpperCase() + color.slice(1)} ${amount} played.`, {
                        type: "success",
                        position: "top-right",
                    });
                } else {
                    toast(res.message, {
                        type: "error",
                        position: "top-right",
                    });
                    if (res.code === "TOKEN_EXPIRED") {
                        signOut()
                    }
                }
            });
        }
    }

    function checkBalance(amount) {
        return balance >= parseInt(amount);
    }

    useEffect(() => {
        socket.on("getGameTime", (time) => {
            setTime(time)
        })

        socket.on("spin", ({randomNumber, range, raffleTime}) => {
            setSpin({
                spinning: true,
                randomNumber,
                range,
                raffleTime
            })
        });

        socket.on("updatePlayers", (players) => {
            setPlayers({
                red: players.red,
                green: players.green,
                black: players.black
            })
        });

        socket.emit("updatePlayers", (players) => {
            setPlayers({
                red: players.red,
                green: players.green,
                black: players.black
            })
        });
    }, [])

    useEffect(() => {
        if (session.status === "authenticated") {
            dispatch(setBalance(session.data.user.balance))
        }
    }, [session])

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <main>
                <Header/>
                <Roulette time={time} spin={spin} setSpin={setSpin} setSpinHistory={setSpinHistory} playedColor={playedColor} giveEarning={giveEarning} />
                <SpinHistory spinHistory={spinHistory} setSpinHistory={setSpinHistory}/>
                <AmountControl amount={amount} setAmount={setAmount} winAmount={winAmount}/>
                <Players playHandle={playHandle} time={time} players={players}/>
            </main>
        </>
    )
}
